/*
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the MIT License. See License.txt in the project root for license information.
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Adxstudio.Xrm.Data;
using Adxstudio.Xrm.Web.UI.WebForms;
using Adxstudio.Xrm.Resources;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Client;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Query;

namespace Adxstudio.Xrm.Commerce
{
	/// <summary>
	/// Implementation of <see cref="IPurchaseDataAdapter"/> that gets purchase information from a Web Form
	/// step target, step metadata, and session.
	/// </summary>
	public class WebFormPurchaseDataAdapter : PurchaseDataAdapter
	{
		/// <summary>
		/// Purchase-related attributes on adx_webformmetadata.
		/// </summary>
		protected static class PurchaseMetadataAttributes
		{
			/// <summary>
			/// Value of the "Purchase" type in the adx_type option set.
			/// </summary>
			public const int Type = 100000003;

			/// <summary>
			/// If provided, this value will dicate the Name of any quotes generated by the given web form step.
			/// </summary>
			public const string QuoteName = "adx_purchasequotename";

			/// <summary>
			/// When set to true, forces the purchase system behave as though the purchase requires shipping.
			/// </summary>
			public const string RequriesShipping = "adx_purchaserequiresshipping";

			/// <summary>
			/// If provided, this class will use this relationship name to traverse from the web form step target
			/// entity to the Purchase Entity. If this value is not provided, it is assumed that the step target
			/// is the Purchase Entity.
			/// </summary>
			public const string TargetEntityRelationship = "adx_purchasetargetentityrelationship";

			/// <summary>
			/// If provided, specifies a relationship to traverse for Product entities, which will be treated
			/// as optional line items for the purchase.
			/// </summary>
			public const string OptionalProductsRelationship = "adx_purchaseoptionalproductsrelationship";

			/// <summary>
			/// If provided, specifies a relationship to traverse for Product entities, which will be treated
			/// as required (non-optional) line items for the purchase.
			/// </summary>
			public const string RequiredProductsRelationship = "adx_purchaserequiredproductsrelationship";

			/// <summary>
			/// If provided, specifies a relationship to traverse for an entity that will act as a Line Item
			/// for the purchase. This can be any entity (custom or otherwise), as the following line item
			/// schema mapping properties will dictate how to retrieve line item info from this entity.
			/// </summary>
			public const string LineItemRelationship = "adx_purchaselineitemrelationship";

			/// <summary>
			/// Attribute logical name for Line Item Entity description. For each line item, this value will
			/// be mapped to quotedetail.description.
			/// </summary>
			public const string LineItemDescription = "adx_purchaselineitemdescriptionattribute";

			/// <summary>
			/// Attribute logical name for Line Item Entity special instructions. An aggregation of these
			/// values for all linte items will be mapped to quote.adx_specialinstructions.
			/// </summary>
			public const string LineItemInstructions = "adx_purchaselineiteminstructionsattribute";

			/// <summary>
			/// Attribute logical name for Line Item Entity order. For each line item, this value will be
			/// mapped to quotedetail.lineitemnumber.
			/// </summary>
			public const string LineItemOrder = "adx_purchaselineitemorderattribute";

			/// <summary>
			/// Attribute logical name for Line Item Entity associated Product. If a valid Product is not
			/// associated with a given line item, that line item will be filtered from the purchase. This
			/// value is required for the line item mapping system to function.
			/// </summary>
			public const string LineItemProduct = "adx_purchaselineitemproductattribute";

			/// <summary>
			/// Attribute logical name for Line Item Entity quantity. For each line item, this value will
			/// be mapped to quotedetail.quantity. If this schema mapping is not specified, the quantity
			/// for each required line item will be assumed to be 1, while the initial quantity for all
			/// optional line items will be 0.
			/// </summary>
			public const string LineItemQuantity = "adx_purchaselineitemquantityattribute";

			/// <summary>
			/// Attribute logical name for Line Item Entity "is required" boolean attribute. If this schema
			/// mapping is not specified, all line items will be assumed to be required.
			/// </summary>
			public const string LineItemRequired = "adx_purchaselineitemrequiredattribute";

			/// <summary>
			/// Attribute logical name for Line Item Entity associated Unit of Measure. If this schema mapping
			/// is not specified, a default unit of measure will be determined for the item, from the portal
			/// price list.
			/// </summary>
			public const string LineItemUom = "adx_purchaselineitemuomattribute";

			/// <summary>
			/// Specifies whether or not to create an invoice when purchase is completed.
			/// </summary>
			public const string CreateInvoiceOnPayment = "adx_purchasecreateinvoiceonpayment";

			/// <summary>
			/// Specifies whether or not to set the order as fulfilled when purchase is completed.
			/// </summary>
			public const string FulfillOrderOnPayment = "adx_purchasefulfillorderonpayment";

			/// <summary>
			/// Relationship on target entity to invoice that is (optionally) create when the purchase is
			/// completed.
			/// </summary>
			public const string TargetEntityInvoiceRelationship = "adx_purchasetargetentityinvoicerelationship";

			/// <summary>
			/// Relationship on target entity to order that is created when purchase is completed.
			/// </summary>
			public const string TargetEntityOrderRelationship = "adx_purchasetargetentityorderrelationship";
		}

		public WebFormPurchaseDataAdapter(EntityReference target, string targetPrimaryKeyLogicalName, EntityReference webForm, IEnumerable<Entity> webFormMetadata, SessionHistory webFormSession, IDataAdapterDependencies dependencies)
			: base(dependencies)
		{
			if (target == null) throw new ArgumentNullException("target");
			if (targetPrimaryKeyLogicalName == null) throw new ArgumentNullException("targetPrimaryKeyLogicalName");
			if (webForm == null) throw new ArgumentNullException("webForm");
			if (webFormMetadata == null) throw new ArgumentNullException("webFormMetadata");

			Target = target;
			TargetPrimaryKeyLogicalName = targetPrimaryKeyLogicalName;
			WebForm = webForm;
			WebFormMetadata = webFormMetadata.ToArray();
			WebFormSession = webFormSession;
		}

		protected EntityReference Target { get; private set; }

		protected string TargetPrimaryKeyLogicalName { get; private set; }

		protected EntityReference WebForm { get; private set; }

		protected IEnumerable<Entity> WebFormMetadata { get; private set; }

		protected SessionHistory WebFormSession { get; private set; }

		public override void CompletePurchase(bool fulfillOrder = false, bool createInvoice = false)
		{
			TraceMethodInfo("Start");

			var purchaseMetadata = WebFormMetadata.FirstOrDefault(IsPurchaseMetadata);

			if (purchaseMetadata == null)
			{
				return;
			}

			if (WebFormSession.QuoteId == Guid.Empty)
			{
				throw new InvalidOperationException("Failed to retrieve purchase quote from web form session.");
			}

			fulfillOrder = purchaseMetadata.GetAttributeValue<bool?>(PurchaseMetadataAttributes.FulfillOrderOnPayment).GetValueOrDefault(fulfillOrder);
			createInvoice = purchaseMetadata.GetAttributeValue<bool?>(PurchaseMetadataAttributes.CreateInvoiceOnPayment).GetValueOrDefault(createInvoice);

			var orderRelationshipName = purchaseMetadata.GetAttributeValue<string>(PurchaseMetadataAttributes.TargetEntityOrderRelationship);
			var setOrderRelationship = !string.IsNullOrEmpty(orderRelationshipName);
			var invoiceRelationshipName = purchaseMetadata.GetAttributeValue<string>(PurchaseMetadataAttributes.TargetEntityInvoiceRelationship);
			var setInvoiceRelationship = !string.IsNullOrEmpty(invoiceRelationshipName);

			if (!(fulfillOrder || setOrderRelationship || createInvoice || setInvoiceRelationship))
			{
				// Nothing to do, return.
				return;
			}

			var quote = new EntityReference("quote", WebFormSession.QuoteId);
			var serviceContext = Dependencies.GetServiceContext();

			var order = serviceContext.CreateQuery("salesorder")
				.Where(e => e.GetAttributeValue<EntityReference>("quoteid") == quote)
				.OrderByDescending(e => e.GetAttributeValue<DateTime>("createdon"))
				.FirstOrDefault();

			if (order == null)
			{
				TraceMethodError("Unable to retrieve associated order for quote {0}.", quote.Id);

				return;
			}

			var serviceContextForUpdates = Dependencies.GetServiceContextForWrite();
			var hasUpdates = false;

			var targetUpdate = new Entity(Target.LogicalName)
			{
				Id = Target.Id
			};
			
			serviceContextForUpdates.Attach(targetUpdate);
			
			if (setOrderRelationship)
			{
				var orderUpdate = new Entity(order.LogicalName)
				{
					Id = order.Id
				};

				serviceContextForUpdates.Attach(orderUpdate);
				serviceContextForUpdates.AddLink(orderUpdate, new Relationship(orderRelationshipName), targetUpdate);

				hasUpdates = true;
			}

			if (createInvoice)
			{
                var convertOrderRequest = new ConvertSalesOrderToInvoiceRequest()
                {
                    ColumnSet = new ColumnSet("invoiceid"),
                    SalesOrderId = order.Id
                };

                var convertOrderResponse = (ConvertSalesOrderToInvoiceResponse)serviceContext.Execute(convertOrderRequest);

                var invoice = convertOrderResponse.Entity;

                var setStateRequest = new SetStateRequest()
                {
                    EntityMoniker = invoice.ToEntityReference(),
                    State = new OptionSetValue(2),
                    Status = new OptionSetValue(100001)
                };

                var setStateResponse = (SetStateResponse)serviceContext.Execute(setStateRequest);

                invoice = serviceContext.CreateQuery("invoice").Where(i => i.GetAttributeValue<Guid>("invoiceid") == convertOrderResponse.Entity.Id).FirstOrDefault();

                if (setInvoiceRelationship && convertOrderResponse != null && convertOrderResponse.Entity != null)
				{
					var invoiceUpdate = new Entity(invoice.LogicalName)
					{
						Id = convertOrderResponse.Entity.Id
					};

					serviceContextForUpdates.Attach(invoiceUpdate);
					serviceContextForUpdates.AddLink(invoiceUpdate, new Relationship(invoiceRelationshipName), targetUpdate);

					hasUpdates = true;
				}
			}

			if (hasUpdates)
			{
				serviceContextForUpdates.SaveChanges();
			}

			if (fulfillOrder)
			{
				var orderClose = new Entity("orderclose");

				orderClose["salesorderid"] = order.ToEntityReference();

				serviceContext.Execute(new FulfillSalesOrderRequest
				{
					OrderClose = orderClose,
					Status = new OptionSetValue(-1),
				});
			}
		}

		public override IPurchasable Select(IEnumerable<IPurchasableItemOptions> options)
		{
			if (options == null) throw new ArgumentNullException("options");

			TraceMethodInfo("Start");

			var purchaseMetadata = WebFormMetadata.FirstOrDefault(IsPurchaseMetadata) ?? new Entity();

			if (WebFormSession.QuoteId != Guid.Empty)
			{
				TraceMethodInfo("Web form session has quote {0}. Creating purchasable from quote.", WebFormSession.QuoteId);

				return SelectFromQuote(new EntityReference("quote", WebFormSession.QuoteId), purchaseMetadata, options);
			}

			var serviceContext = Dependencies.GetServiceContext();

			Entity purchaseEntity;

			if (!TryGetPurchaseEntity(serviceContext, purchaseMetadata, out purchaseEntity))
			{
				TraceMethodError("Failed to retrieve purchase entity from web form step. Returning null.");

				return null;
			}

			TraceMethodInfo("Found purchase entity: {0}:{1}", purchaseEntity.LogicalName, purchaseEntity.Id);

			var requiredProductsRelationship = purchaseMetadata.GetAttributeValue<string>(PurchaseMetadataAttributes.RequiredProductsRelationship);

			if (!string.IsNullOrEmpty(requiredProductsRelationship))
			{
				return SelectFromProductsDirectlyRelatedToPurchaseEntity(serviceContext, purchaseEntity, requiredProductsRelationship, purchaseMetadata, options);
			}

			var lineItemRelationship = purchaseMetadata.GetAttributeValue<string>(PurchaseMetadataAttributes.LineItemRelationship);

			if (!string.IsNullOrEmpty(lineItemRelationship))
			{
				return SelectFromLineItemEntities(serviceContext, purchaseEntity, lineItemRelationship, purchaseMetadata, options);
			}

			if (purchaseEntity.LogicalName == "product")
			{
				return SelectFromProduct(purchaseEntity, purchaseMetadata, options);
			}

			if (purchaseEntity.LogicalName == "quote")
			{
				return SelectFromQuote(purchaseEntity.ToEntityReference(), purchaseMetadata, options);
			}

			TraceMethodError("Failed to retrieve purchasable using web form step metadata. Returning null.");

			return null;
		}

		public override void UpdateShipToAddress(IPurchaseAddress address)
		{
			if (address == null) throw new ArgumentNullException("address");

			if (WebFormSession.QuoteId == Guid.Empty)
			{
				throw new InvalidOperationException("Unable to determine quote from web form session.");
			}

			var quoteDataAdapter = new QuotePurchaseDataAdapter(new EntityReference("quote", WebFormSession.QuoteId), Dependencies);

			quoteDataAdapter.UpdateShipToAddress(address);
		}

		protected virtual EntityReference CreateQuote(IEnumerable<LineItem> lineItems, Entity purchaseMetadata, EntityReference purchaseEntity)
		{
			return QuoteFunctions.CreateQuote(lineItems, purchaseEntity, Dependencies.GetServiceContext(), Dependencies.GetServiceContextForWrite(), 
				Dependencies.GetPortalUser(), Dependencies.GetPriceList(), WebFormSession.AnonymousIdentification, Target, purchaseMetadata);
		}

		protected virtual EntityReference GetQuoteCustomer(Entity purchaseMetadata)
		{
			var user = Dependencies.GetPortalUser();

			if (user != null)
			{
				return user;
			}

			var visitorId = WebFormSession.AnonymousIdentification;

			if (string.IsNullOrEmpty(visitorId))
			{
				throw new InvalidOperationException("Unable to create anonymous quote customer record.");
			}

			return QuoteFunctions.GetQuoteCustomer(Dependencies.GetServiceContext(), null, visitorId);

		}

		protected virtual string GetQuoteName(Entity purchaseMetadata)
		{
			var serviceContext = Dependencies.GetServiceContextForWrite();

			var webForm = serviceContext.CreateQuery("adx_webform")
				.Where(e => e.GetAttributeValue<Guid>("adx_webformid") == WebForm.Id)
				.Select(e => new {Name = e.GetAttributeValue<string>("adx_name")})
				.ToArray()
				.FirstOrDefault();

			 return QuoteFunctions.GetQuoteName(serviceContext, purchaseMetadata, webForm.Name);
		}

		protected virtual IEnumerable<LineItem> GetValidLineItems(IEnumerable<LineItem> lineItems)
		{
			return lineItems.Where(e =>
			{
				var state = e.Product.GetAttributeValue<OptionSetValue>("statecode");

				return state != null && state.Value == 0;
			});
		}

		protected virtual IPurchasable SelectFromLineItemEntities(OrganizationServiceContext serviceContext, Entity purchaseEntity, string lineItemRelationship, 
			Entity purchaseMetadata, IEnumerable<IPurchasableItemOptions> options)
		{
			TraceMethodInfo("Start: purchaseEntity={0}:{1}, lineItemRelationship={2}", purchaseEntity.LogicalName, purchaseEntity.Id, lineItemRelationship);

			var productAttribute = purchaseMetadata.GetAttributeValue<string>(PurchaseMetadataAttributes.LineItemProduct);

			if (string.IsNullOrEmpty(productAttribute))
			{
				TraceMethodError("Unable to retrieve products from line item entities. {0} not defined in web form step metadata. Returning null.", PurchaseMetadataAttributes.LineItemProduct);

				return null;
			}

			var descriptionAttribute = purchaseMetadata.GetAttributeValue<string>(PurchaseMetadataAttributes.LineItemDescription);
			var instructionsAttribute = purchaseMetadata.GetAttributeValue<string>(PurchaseMetadataAttributes.LineItemInstructions);
			var orderAttribute = purchaseMetadata.GetAttributeValue<string>(PurchaseMetadataAttributes.LineItemOrder);
			var requiredAttribute = purchaseMetadata.GetAttributeValue<string>(PurchaseMetadataAttributes.LineItemRequired);
			var quantityAttribute = purchaseMetadata.GetAttributeValue<string>(PurchaseMetadataAttributes.LineItemQuantity);
			var uomAttribute = purchaseMetadata.GetAttributeValue<string>(PurchaseMetadataAttributes.LineItemUom);

			var entities = purchaseEntity.GetRelatedEntities(serviceContext, lineItemRelationship).ToArray();

			if (!entities.Any())
			{
				TraceMethodError("Unable to retrieve any line item entities. Returning null.");

				return null;
			}

			var productIds = entities
				.Select(e => e.GetAttributeValue<EntityReference>(productAttribute))
				.Where(product => product != null)
				.Select(product => product.Id)
				.ToArray();

			if (!productIds.Any())
			{
				TraceMethodError("Unable to retrieve any products from line item entities. Returning null.");

				return null;
			}

			var products = serviceContext.CreateQuery("product")
				.WhereIn(e => e.GetAttributeValue<Guid>("productid"), productIds)
				.ToDictionary(e => e.Id, e => e);

			var lineItems = entities
				.Select(e => LineItem.GetLineItemFromLineItemEntity(e, productAttribute, descriptionAttribute, instructionsAttribute, orderAttribute, requiredAttribute, quantityAttribute, uomAttribute, products))
				.Where(lineItem => lineItem != null);
			
			var quote = QuoteFunctions.CreateQuote(lineItems, purchaseEntity.ToEntityReference(), serviceContext, Dependencies.GetServiceContextForWrite(), Dependencies.GetPortalUser(),
				Dependencies.GetPriceList(), WebFormSession.AnonymousIdentification, Target, purchaseMetadata);

			var purchasable = quote == null
				? null
				: SelectFromQuote(quote, purchaseMetadata, options);

			TraceMethodInfo("End");

			return purchasable;
		}

		protected virtual IPurchasable SelectFromProduct(Entity product, Entity purchaseMetadata, IEnumerable<IPurchasableItemOptions> options)
		{
			TraceMethodInfo("Start: product={0}:{1}", product.LogicalName, product.Id);

			var lineItems = new []
			{
				new LineItem(product, null, 1, false, product.GetAttributeValue<string>("description"), null, 1)
			};

			var quote = QuoteFunctions.CreateQuote(lineItems, Target, Dependencies.GetServiceContext(), Dependencies.GetServiceContextForWrite(), Dependencies.GetPortalUser(),
				Dependencies.GetPriceList(), WebFormSession.AnonymousIdentification, Target, purchaseMetadata);

			var purchasable = quote == null
				? null
				: SelectFromQuote(quote, purchaseMetadata, options);

			TraceMethodInfo("End");

			return purchasable;
		}

		protected virtual IPurchasable SelectFromProductsDirectlyRelatedToPurchaseEntity(OrganizationServiceContext serviceContext, Entity purchaseEntity, string requiredProductsRelationship, Entity purchaseMetadata, IEnumerable<IPurchasableItemOptions> options)
		{
			TraceMethodInfo("Start: purchaseEntity={0}:{1}, requiredProductsRelationship={2}", purchaseEntity.LogicalName, purchaseEntity.Id, requiredProductsRelationship);

			var requiredProducts = purchaseEntity.GetRelatedEntities(serviceContext, requiredProductsRelationship);

			var optionalProductsRelationship = purchaseMetadata.GetAttributeValue<string>(PurchaseMetadataAttributes.OptionalProductsRelationship);

			var optionalProducts = string.IsNullOrEmpty(optionalProductsRelationship)
				? Enumerable.Empty<Entity>()
				: purchaseEntity.GetRelatedEntities(serviceContext, optionalProductsRelationship);

			var requiredLineItems = requiredProducts.Select(e => new LineItem(e, null, 1, false, e.GetAttributeValue<string>("description"), null, 1));
			var optionalLineItems = optionalProducts.Select(e => new LineItem(e, null, 0, true, e.GetAttributeValue<string>("description"), null, 2));

			var lineItems = requiredLineItems.Union(optionalLineItems);

			var quote = QuoteFunctions.CreateQuote(lineItems, purchaseEntity.ToEntityReference(), serviceContext, Dependencies.GetServiceContextForWrite(), Dependencies.GetPortalUser(),
				Dependencies.GetPriceList(), WebFormSession.AnonymousIdentification, Target, purchaseMetadata);

			var purchasable = quote == null
				? null
				: SelectFromQuote(quote, purchaseMetadata, options);

			TraceMethodInfo("End");

			return purchasable;
		}

		protected virtual IPurchasable SelectFromQuote(EntityReference quote, Entity purchaseMetadata = null, IEnumerable<IPurchasableItemOptions> options = null)
		{
			var requiresShipping = purchaseMetadata != null && purchaseMetadata.GetAttributeValue<bool?>(PurchaseMetadataAttributes.RequriesShipping).GetValueOrDefault(false);

			var quoteDataAdapter = new QuotePurchaseDataAdapter(quote, Dependencies, requiresShipping);

			return quoteDataAdapter.Select(options ?? Enumerable.Empty<IPurchasableItemOptions>());
		}

		private bool TryGetPurchaseEntity(OrganizationServiceContext serviceContext, Entity purchaseMetadata, out Entity purchaseEntity)
		{
			purchaseEntity = null;

			var targetEntity = serviceContext.CreateQuery(Target.LogicalName)
				.FirstOrDefault(e => e.GetAttributeValue<Guid>(TargetPrimaryKeyLogicalName) == Target.Id);

			if (targetEntity == null)
			{
				return false;
			}

			var purchaseEntityRelationship = purchaseMetadata.GetAttributeValue<string>(PurchaseMetadataAttributes.TargetEntityRelationship);

			if (string.IsNullOrEmpty(purchaseEntityRelationship))
			{
				purchaseEntity = targetEntity;

				return true;
			}

			purchaseEntity = targetEntity.GetRelatedEntity(serviceContext, purchaseEntityRelationship);

			return purchaseEntity != null;
		}

		private static bool IsPurchaseMetadata(Entity webFormMetadata)
		{
			if (webFormMetadata == null)
			{
				return false;
			}

			var optionSetValue = webFormMetadata.GetAttributeValue<OptionSetValue>("adx_type");

			return optionSetValue != null && optionSetValue.Value == PurchaseMetadataAttributes.Type;
		}

		
	}
}
