// <auto-generated />

using Adxstudio.Xrm.Cms;
using DevTrends.MvcDonutCaching;

namespace Adxstudio.Xrm.Web.Mvc.Liquid
{
	/// <summary>
	/// Language information for template
	/// </summary>
	public class LanguageDrop : EntityDrop
	{
		/// <summary>
		/// list of Languages
		/// </summary>
		private IWebsiteLanguage _language;

		/// <summary>
		/// language url
		/// </summary>
		private string _url = string.Empty;

		/// <summary>
		/// Initializes a new instance of the <see cref="LanguageDrop" /> class
		/// </summary>
		/// <param name="portalLiquidContext">Portal Liquid Context</param>
		/// <param name="websiteLanguage">Language for Drop</param>
		public LanguageDrop(IPortalLiquidContext portalLiquidContext, IWebsiteLanguage websiteLanguage) : base(portalLiquidContext)
		{
			this._language = websiteLanguage;

			// If for whatever reason ContextLanguageInfo or websiteLanguage is null, leave the url as empty string.
			// (This only happens if we have updated CRM data with multi-language template, but no WebsiteLanguage entities, which should never be the case).
			var contextLanguageInfo = portalLiquidContext.ContextLanguageInfo;
			if (contextLanguageInfo != null && websiteLanguage != null)
			{
				_url = contextLanguageInfo.FormatUrlWithLanguage(true, websiteLanguage.Code, null, true);
			}
		}

		/// <summary>
		/// The current request url prefixed with the current language code (only if multi-language is enabled).
		/// </summary>
		public override string Url
		{
			get { return _url; }
		}

		/// <summary>
		/// The current request url prefixed with the current language code (only if multi-language is enabled).
		/// Returned as a donut cache substitution string if the parent view supports donut holes.
		/// </summary>
		public string UrlSubstitution
		{
			get
			{
				var viewSupportsDonuts = ViewSupportsDonuts;
				if (!viewSupportsDonuts)
				{
					return _url;
				}
				
				var rawUrlHtml = Html.Action("ContextUrlWithLanguage", "Layout", new { area = "Portal", languageCode = _language.Code }, viewSupportsDonuts);
				return rawUrlHtml == null ? null : rawUrlHtml.ToString();
			}
		}

		/// <summary>
		/// Title of language
		/// </summary>
		public string Name
		{
			get { return this._language == null ? string.Empty : this._language.DisplayName; }
		}

		/// <summary>
		/// Language code
		/// </summary>
		public string Code
		{
			get { return this._language == null ? string.Empty : this._language.Code; }
		}
	}
}
